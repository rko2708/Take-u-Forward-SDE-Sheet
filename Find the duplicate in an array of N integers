//find the duplicates in an array of size n
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

//O(nlogn) and O(1) space
void solve_by_method_1(int a[], int n)
{
	sort(a, a+n);
	for(int i=0;i<n;i++)
	{
		int temp = a[i];
		int j = i;
		while(temp == a[j] and j < n) j++;
		if(j != i) cout << temp << ' ', i = j;
	}
}

//O(n) and O(n) space using unordered map
void solve_by_method_2(int a[], int n)
{
	unordered_map<int,int> mapp;
	for(int i=0;i<n;i++) mapp[a[i]]++; 
	for(auto it: mapp)
	{
		if(it.second > 1) cout << it.first << ' ';
	}
}

void solve_by_method_3(int a[], int n)
{
	for(int i=0;i<n;i++)
	{
		if(a[abs(a[i])] >= 0) a[abs(a[i])] = -a[abs(a[i])];
		else cout << abs(a[i]) << ' ';
	}
}

int main() {
	// your code goes here
	int n; cin >> n;
	int a[n];
	for(int i=0;i<n;i++) cin >> a[i];
	solve_by_method_1(a, n);
	cout << '\n';
	solve_by_method_2(a, n);
	cout << '\n';
	solve_by_method_3(a, n);
	return 0;
}
