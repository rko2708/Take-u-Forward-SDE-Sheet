// merge two sorted arrays
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

void solve_using_method_1(int a[], int n, int b[], int m)
{
	int ans[n+m];
	int i = 0, j = 0;
	while(i < n and j < m)
	{
		if(a[i] < b[j] and i < n) ans[i+j] = a[i], i++;
		else if(j < m) ans[i+j] = b[j], j++;
	}
	if(i < n)
	{
		j--;
		while(i + j < n + m) ans[i+j] = a[i++];
	}
	if(j < m)
	{
		i--;
		while(i + j < n + m) ans[i+j] = b[j++];
	}
	for(int i=0;i<n+m;i++) cout << ans[i] << ' ';
}

void solve_using_method_2(int a[], int n, int b[], int m)
{
	for(int i=0;i<n;i++)
	{
		if(a[i] > b[0])
		{
			swap(a[i], b[0]);
			for(int j=1;j<m;j++)
			{
				if(b[j-1] > b[j]) swap(b[j], b[j-1]);
			}
		}
	}
	for(int i=0;i<n;i++) cout << a[i] << ' ';
	for(int i=0;i<m;i++) cout << b[i] << ' ';
}

int find_gap(int mid)
{
	return (mid + 1) >> 1;
}

void solve_using_method_3(int a[], int n, int b[], int m)
{
	int gap = find_gap(n + m);
	int i = 0, j = 0;
	// 0, gap -> 1, gap + 1 -> 2, gap + 2
	while(1)
	{
		//cout << "gap: " << gap << '\n';
		for(i=0;i<n-gap;i++)
		{
			if(i + gap < n)
			{
				if(a[i] > a[gap + i]) swap(a[i], a[gap + i]);
			}
		}
		//cout << i << '\n';
		if(gap > n)
		{
			j = gap - n;
			for(;i < n and j < m; i++, j++)
			{
				if(a[i] > b[j])
				{
					swap(a[i], b[j]);
				}
			}
		}
		else
		{
			j = 0;
			for(;i < n && j < m; i++, j++)
			{
				if(a[i] > b[j])
				{
					swap(a[i], b[j]);
				}
			}
		}
		
		for(j=0;j<m;j++)
		{
			if(j + gap < m)
			{
				if(b[j] > b[j + gap]) swap(b[j], b[gap + j]);
			}
		}
		if(gap == 1) break;
		gap = find_gap(gap);
	}
	for(int i=0;i<n;i++) cout << a[i] << ' ';
	for(int i=0;i<m;i++) cout << b[i] << ' ';
}

int main() {
	// your code goes here
	int tests = 1; cin >> tests;
	while(tests--)
	{
		int n; cin >> n;
		int m; cin >> m;
		int a[n], b[m];
		for(int i=0;i<n;i++) cin >> a[i];
		for(int j=0;j<m;j++) cin >> b[j];
		solve_using_method_1(a, n, b, m);
		cout << '\n';
		solve_using_method_2(a, n, b, m);
		cout << '\n';
		solve_using_method_3(a, n, b, m);
		cout << '\n';
	}
	return 0;
}
